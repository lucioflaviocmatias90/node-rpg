openapi: 3.0.0
info:
  version: 1.0.0
  title: Node-RPG Server
  description: A project based RPG table to create characters play on friends
  contact:
    name: Lucio Flavio
    email: lucioflavio.cmatias90@hotmail.com
  license:
    name: MIT
servers:
  - url: 'http://localhost:3333'
    description: Development Server
paths:
  /users:
    get:
      tags:
        - users
      summary: List all users
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of users
          content:
            application/json:
              example:
                list:
                  - id: 0c3b2f3e-f5a5-4897-9121-98e68fcc0ebc
                    name: Fulano Ciclano
                    email: fulano@email.com
                    password: >-
                      $2b$12$YjRIZCxmdZPhBQYHtZvdQOx8vV8oMVpUmmIO0xd6inVvES21YDfIe
                    gender: fulano@email.com
                    birthday: fulano@email.com
                    createdAt: '2021-01-04T20:29:55.984Z'
                    updatedAt: '2021-01-04T20:29:55.984Z'
                    deletedAt: null
    post:
      tags:
        - users
      summary: Create a user
      requestBody:
        description: user to add to the system
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the user
                  type: string
                  example: Lucio Flavio C. Matias
                email:
                  description: Updated valid email of the user
                  type: string
                  example: lucio@email.com
                password:
                  description: Updated password with min 6 characters of the user
                  type: string
                  example: '123123'
                gender:
                  description: Updated gender of the user
                  type: string
                  example: masculino
                birthday:
                  description: Updated birthday of the user
                  type: string
                  example: '1970-12-27'
              required:
                - name
                - email
                - password
                - gender
                - birthday
            examples:
              user:
                summary: All completed user data
                value:
                  name: Fulano Ciclano
                  email: fulano@email.com
                  password: '123123'
                  gender: fulano@email.com
                  birthday: fulano@email.com
              user2:
                summary: Not completed user data
                value:
                  name: Beltrano Ciclano
                  email: beltrano@email.com
        required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              example:
                user:
                  id: 0c3b2f3e-f5a5-4897-9121-98e68fcc0ebc
                  name: Fulano Ciclano
                  email: fulano@email.com
                  password: $2b$12$YjRIZCxmdZPhBQYHtZvdQOx8vV8oMVpUmmIO0xd6inVvES21YDfIe
                  gender: fulano@email.com
                  birthday: fulano@email.com
                  createdAt: '2021-01-04T20:29:55.984Z'
                  updatedAt: '2021-01-04T20:29:55.984Z'
                  deletedAt: null
        '400':
          description: User already exists
          content:
            application/json:
              example:
                error:
                  code: '001'
                  message: Email em uso
  '/users/{userId}':
    delete:
      tags:
        - users
      summary: Destroy for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              example:
                message: Usuário excluído com sucesso
        '400':
          description: User not exists
          content:
            application/json:
              example:
                error:
                  code: '002'
                  message: Erro ao excluir o usuário
                  err: >-
                    invalid input syntax for type uuid:
                    "c3b2f3e-f5a5-4897-9121-98e68fcc0ebc"
  /sessions:
    post:
      tags:
        - sessions
      summary: Create a new session
      requestBody:
        description: Send credentials to create a new session
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Updated valid email of the user
                  type: string
                  example: lucio@email.com
                password:
                  description: Updated password with min 6 characters of the user
                  type: string
                  example: '123123'
              required:
                - email
                - password
            examples:
              user:
                summary: All completed user data
                value:
                  email: fulano@email.com
                  password: '123123'
        required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              example:
                userId: 8376f771-0eb7-43cb-b5aa-ddbb4e87c04e
                token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiODM3NmY3NzEtMGViNy00M2NiLWI1YWEtZGRiYjRlODdjMDRlIiwiaWF0IjoxNjA5ODU4ODEzLCJleHAiOjE2MDk4NjI0MTN9.jXqvcWJxoSO0mri_-_ZCAc368i97UDyVa3-vkx7bcAU
        '400':
          description: User already exists
          content:
            application/json:
              example:
                error:
                  code: '001'
                  message: Email ou senha inválido
  /rooms:
    get:
      tags:
        - rooms
      summary: List all available rooms
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Authentication Bearer Token
      responses:
        '200':
          description: Successful
          content:
            application/json:
              example:
                list:
                  - id: 93f6541f-365e-4747-86ef-6e4db67bd17c
                    name: Masmorra da Morte Sombria
                    statusRoomId: f891cb29-2b75-4781-99e4-4550d20fda67
                    createdAt: '2021-01-04T23:58:45.741Z'
                    updatedAt: '2021-01-04T23:58:45.741Z'
        '400':
          description: An occurred erro when list rooms
          content:
            application/json:
              example:
                error:
                  code: '001'
                  message: Erro ao encontrar as salas
    post:
      tags:
        - rooms
      summary: Create a new session
      requestBody:
        description: Send credentials to create a new session
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Updated valid email of the user
                  type: string
                  example: lucio@email.com
                password:
                  description: Updated password with min 6 characters of the user
                  type: string
                  example: '123123'
              required:
                - email
                - password
            examples:
              user:
                summary: All completed user data
                value:
                  email: fulano@email.com
                  password: '123123'
        required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              example:
                userId: 8376f771-0eb7-43cb-b5aa-ddbb4e87c04e
                token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiODM3NmY3NzEtMGViNy00M2NiLWI1YWEtZGRiYjRlODdjMDRlIiwiaWF0IjoxNjA5ODU4ODEzLCJleHAiOjE2MDk4NjI0MTN9.jXqvcWJxoSO0mri_-_ZCAc368i97UDyVa3-vkx7bcAU
        '400':
          description: User already exists
          content:
            application/json:
              example:
                error:
                  code: '001'
                  message: Email ou senha inválido
